function DSU_test(Graph g) {
 Dsu mydsu;
 propNode<int> cheapest;

 forall (u in g.nodes()) {
   forall (v in g.neighbors(u)) {
     edge e = g.get_edge(u, v);
     int u_comp = mydsu.find(u);
     int v_comp = mydsu.find(v);

     mydsu.merge(u_comp, v_comp);

     if (u_comp != v_comp) {
       if (e.weight < cheapest.u_comp) {
         cheapest.u_comp = 0;
       }
       if (e.weight < cheapest.v_comp) {
         cheapest.v_comp = 0;
       }
     }
   }
 }
}
